# -*- coding: utf-8 -*-
"""decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NrJUQg0NCNN16fqqqBT-FTvbHzKo-Yeq
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns 

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/data.csv")

data.head()

data.info()

data.drop(["Unnamed: 32", "id"],axis=1, inplace=True)

M = data[data.diagnosis=="M"]
B = data[data.diagnosis=="B"]

plt.scatter(M.radius_mean,M.texture_mean,color="red",label="malignant")
plt.scatter(B.radius_mean,B.texture_mean,color="green",label="benign")
plt.xlabel("radius_mean")
plt.ylabel("texture_mean")
plt.legend()
plt.show()

data.diagnosis = [1 if each=="M" else 0 for each in data.diagnosis]

y = data.diagnosis.values

x_data = data.iloc[:,1:3].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_data,y,test_size=0.3,random_state=1)

from sklearn.preprocessing import StandardScaler
st_x = StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)

from sklearn.tree import DecisionTreeClassifier
tree_classification = DecisionTreeClassifier(random_state=1, criterion='entropy')
tree_classification.fit(x_train,y_train)

y_head = tree_classification.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,y_head)
accuracy

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_head)

f,ax = plt.subplots(figsize=(5,5))
sns.heatmap(cm,annot=True,fmt= '.0f', linewidths = 0.5, linecolor = "red", ax=ax)
plt.xlabel("y_pred")
plt.ylabel("y_test")
plt.show()

from matplotlib.colors import ListedColormap
from matplotlib.axes._axes import _log as matplotlib_axes_logger
matplotlib_axes_logger.setLevel('ERROR')

x_set, y_set = x_train, y_train
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step =0.01),
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
plt.contourf(x1, x2, tree_classification.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('purple','green' )))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],c = ListedColormap(('purple', 'green'))(i), label = j)
plt.title('Decision Tree Algorithm (Training set)')
plt.xlabel('iyi_huylu_tümör')
plt.ylabel('kötü_huylu_tümör')
plt.legend()
plt.show()

from matplotlib.colors import ListedColormap
from matplotlib.axes._axes import _log as matplotlib_axes_logger
matplotlib_axes_logger.setLevel('ERROR')

x_set, y_set = x_test, y_test
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step =0.01),
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
plt.contourf(x1, x2, tree_classification.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('purple','green' )))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],c = ListedColormap(('purple', 'green'))(i), label = j)
plt.title('Decision Tree Algorithm(Test set)')
plt.xlabel('iyi_huylu_tümör')
plt.ylabel('kötü_huylu_tümör')
plt.legend()
plt.show()